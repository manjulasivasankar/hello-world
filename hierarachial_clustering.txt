
"""
Created on Mon Apr 23 11:16:11 2019

@author:  manjula
"""

# Run in python console
import nltk; nltk.download('stopwords')

# Run in terminal or command prompt
#python3 -m spacy download en

import re
import numpy as np
import pandas as pd
from pprint import pprint


from sklearn.cluster import KMeans

from sklearn.decomposition import TruncatedSVD

# Gensim
import gensim
import gensim.corpora as corpora
from gensim.utils import simple_preprocess
from gensim.models import CoherenceModel

# spacy for lemmatization
import spacy

# Plotting tools
#import pyLDAvis
import matplotlib.pyplot as plt

# NLTK Stop words
from nltk.corpus import stopwords
stop_words = stopwords.words('english')
stop_words.extend(['from', 'subject', 're', 'edu', 'use'])


#fp = '/Users/sourish/Documents/Research/Kalapakkam/Manjula/Topic_Model/pubnew.csv'
fp='/auto/staff/sourish/Documents/Research/Kalapakkam/Manjula/Topic_Model/pubnew.csv'
df = pd.read_csv(fp)
df.head()

# Convert to list
data = df.content.values.tolist()

# Remove Emails
data = [re.sub('\S*@\S*\s?', '', sent) for sent in data]


# Remove new line characters
data = [re.sub('\s+', ' ', sent) for sent in data]


# Remove distracting single quotes
data = [re.sub("\'", "", sent) for sent in data]


pprint(data[:1])

'''Tokenize words and Clean-up text'''

def sent_to_words(sentences):
    for sentence in sentences:
        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))  
        # deacc=True removes punctuations
        
data_words = list(sent_to_words(data))

print(data_words[:1])


# Build the bigram and trigram models
bigram = gensim.models.Phrases(data_words, min_count=5, threshold=100) # higher threshold fewer phrases.
trigram = gensim.models.Phrases(bigram[data_words], threshold=100)  

# Faster way to get a sentence clubbed as a trigram/bigram
bigram_mod = gensim.models.phrases.Phraser(bigram)
trigram_mod = gensim.models.phrases.Phraser(trigram)

# See trigram example
print(trigram_mod[bigram_mod[data_words[0]]])

'''Remove Stopwords, Make Bigrams and Lemmatize'''

# Define functions for stopwords, bigrams, trigrams and lemmatization
def remove_stopwords(texts):
    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]

def make_bigrams(texts):
    return [bigram_mod[doc] for doc in texts]

def make_trigrams(texts):
    return [trigram_mod[bigram_mod[doc]] for doc in texts]

def lemmatization(texts, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):
    """https://spacy.io/api/annotation"""
    texts_out = []
    for sent in texts:
        doc = nlp(" ".join(sent)) 
        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])
    return texts_out


# Remove Stop Words
data_words_nostops = remove_stopwords(data_words)


# Form Bigrams
data_words_bigrams = make_bigrams(data_words_nostops)


# Initialize spacy 'en' model, keeping only tagger component (for efficiency)
# python3 -m spacy download en
#nlp = spacy.load('en', disable=['parser', 'ner'])
nlp = spacy.load("en_core_web_sm")

# Do lemmatization keeping only noun, adj, vb, adv
data_lemmatized = lemmatization(data_words_bigrams, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])


# Create Dictionary
id2word = corpora.Dictionary(data_lemmatized)


# Create Corpus
#texts = data_words_bigrams
texts = data_lemmatized

# Term Document Frequency

corpus = [id2word.doc2bow(text) for text in texts]


# View
print(corpus[:1])

id2word[0]

# Human readable format of corpus (term-frequency)
[[(id2word[id], freq) for id, freq in cp] for cp in corpus[:1]]



''' find the optimal number of topics for LDA'''

def compute_coherence_values(dictionary, corpus, texts, limit, start=2, step=3):
    """
    Compute c_v coherence for various number of topics

    Parameters:
    ----------
    dictionary : Gensim dictionary
    corpus : Gensim corpus
    texts : List of input texts
    limit : Max num of topics

    Returns:
    -------
    model_list : List of LDA topic models
    coherence_values : Coherence values corresponding to the LDA model with respective number of topics
    """
    coherence_values = []
    model_list = []
    for num_topics in range(start, limit, step):
        model = gensim.models.ldamodel.LdaModel( corpus=corpus
                                                ,num_topics=num_topics
                                                ,id2word=id2word
                                                ,random_state=100
                                                ,update_every=1
                                                ,chunksize=100
                                                ,passes=10
                                                ,iterations=50000
                                                ,alpha='auto'
                                                ,per_word_topics=True)
        model_list.append(model)
        coherencemodel = CoherenceModel(model=model, texts=texts, dictionary=dictionary, coherence='c_v')
        coherence_values.append(coherencemodel.get_coherence())

    return model_list, coherence_values


# Can take a long time to run.
model_list, coherence_values = compute_coherence_values(dictionary=id2word
                                                        , corpus=corpus
                                                        , texts=texts
                                                        , start=2, limit=25, step=1)

# Show graph
limit=25; start=2; step=1;
x = range(start, limit, step)
plt.plot(x, coherence_values)
plt.xlabel("Num Topics")
plt.ylabel("Coherence score")
plt.legend(("coherence_values"), loc='best')
plt.show()

# Print the coherence scores
for m, cv in zip(x, coherence_values):
    print("Num Topics =", m, " has Coherence Value of", round(cv, 4))


# number of toics with optimal coherence value
num_top = 20
lda_model = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                           id2word=id2word,
                                           num_topics=num_top, 
                                           random_state=100,
                                           update_every=1,
                                           chunksize=100,
                                           passes=10,
                                           iterations=50000,
                                           alpha='auto',
                                           per_word_topics=True)



## topics prob for each documents
doc = lda_model.get_document_topics(corpus,minimum_probability=0)
print(doc[1])


n = df.shape[0]

doc_topic_prob = np.zeros((n,num_top))
for i in range(0,n,1):
    for j in range(0,num_top,1):
        doc_topic_prob[i,j]  = doc[i][j][1]
        

doc_topic_prob_df = pd.DataFrame(doc_topic_prob)
cols = ['prob_topic_' + str(i+1) for i in range(10)]
doc_topic_prob_df.columns = cols
doc_topic_prob_df.head()



###
doc_topic_prob_df_trans = np.transpose(doc_topic_prob_df)

import scipy.cluster.hierarchy as shc

plt.figure(figsize=(10, 7))  
plt.title("Topic Dendograms")  
dend = shc.dendrogram(shc.linkage(doc_topic_prob_df_trans
                                  , method='ward'),leaf_rotation=0)  

## top keywords for each topic
lda_model.get_topic_terms(topicid=0)
id2word[159]
id2word[1805]
id2word[1713]
id2word[2334]
""" material, molten, melt, stainless_steel"""

lda_model.get_topic_terms(topicid=1)
id2word[1735]
id2word[86]
id2word[90]
id2word[101]
id2word[1905]
""" growth, optical, property, structural, tio """

lda_model.get_topic_terms(topicid=6)
id2word[266]
id2word[253]
id2word[350]
id2word[1200]
id2word[82]

